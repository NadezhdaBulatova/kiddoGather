// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using usersService.Data;

#nullable disable

namespace usersService.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240310035900_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("usersService.Models.ChatModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("LastMessageId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("usersService.Models.KidModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("usersService.Models.LanguageModel", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("usersService.Models.LocationModel", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Character")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("usersService.Models.MessageModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("ToId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("usersService.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("usersService.Models.UsersChatsModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UsersChats");
                });

            modelBuilder.Entity("usersService.Models.UsersLanguagesModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LanguageId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UsersLanguages");
                });

            modelBuilder.Entity("usersService.Models.UsersLocationsModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("UsersLocations");
                });

            modelBuilder.Entity("usersService.Models.ChatModel", b =>
                {
                    b.HasOne("usersService.Models.MessageModel", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("usersService.Models.KidModel", b =>
                {
                    b.HasOne("usersService.Models.UserModel", "User")
                        .WithMany("Kids")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("usersService.Models.MessageModel", b =>
                {
                    b.HasOne("usersService.Models.ChatModel", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("usersService.Models.UserModel", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("usersService.Models.UserModel", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("Chat");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("usersService.Models.UsersChatsModel", b =>
                {
                    b.HasOne("usersService.Models.ChatModel", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usersService.Models.UserModel", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("usersService.Models.UsersLanguagesModel", b =>
                {
                    b.HasOne("usersService.Models.LanguageModel", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usersService.Models.UserModel", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("usersService.Models.UsersLocationsModel", b =>
                {
                    b.HasOne("usersService.Models.LocationModel", "Location")
                        .WithMany("UserLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usersService.Models.UserModel", "User")
                        .WithMany("UserLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("usersService.Models.ChatModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("usersService.Models.LanguageModel", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("usersService.Models.LocationModel", b =>
                {
                    b.Navigation("UserLocations");
                });

            modelBuilder.Entity("usersService.Models.UserModel", b =>
                {
                    b.Navigation("Kids");

                    b.Navigation("UserChats");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
